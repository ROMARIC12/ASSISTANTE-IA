// S√©lection des √©l√©ments HTML
const sendButton = document.getElementById('send-btn');
const inputField = document.getElementById('user-input');
const messageContainer = document.getElementById('chat-messages');

// Fonction pour ajouter un message dans le chat
function addMessage(text, className) {
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('message', className);
    messageDiv.textContent = text;
    messageContainer.appendChild(messageDiv);
    messageContainer.scrollTop = messageContainer.scrollHeight; // Scroll auto en bas
    return messageDiv;
}

// Fonction pour afficher le texte progressivement (effet "typing")
function typeMessage(element, text, speed = 50) {
    element.textContent = ""; // Vide le contenu
    let i = 0;
    function typingEffect() {
        if (i < text.length) {
            element.textContent += text[i];
            i++;
            setTimeout(typingEffect, speed);
        }
    }
    typingEffect();
}

// Fonction d'envoi du message
function sendMessage() {
    const message = inputField.value.trim();
    if (message === "") return;

    addMessage(message, "user-message"); // Affiche le message utilisateur
    inputField.value = "";

    // Affiche "Le bot r√©fl√©chit..."
    const botDiv = addMessage("Le bot r√©fl√©chit...", "bot-message");

    // Envoi de la requ√™te √† l'API Gemini
    fetch("/.netlify/functions/api", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            contents: [{ 
                parts: [{ 
                    text: `
                        üéØ R√¥le :
                            Tu es un architecte expert en ing√©nierie de prompts, sp√©cialis√© dans la cr√©ation d'instructions d'une pr√©cision chirurgicale pour maximiser la performance des mod√®les d'IA.
                            Ton objectif est de transformer toute demande utilisateur en un prompt parfaitement structur√©, d√©taill√© et optimis√© pour produire la meilleure r√©ponse possible."

                        üõ†Ô∏è M√©thodologie d‚Äôoptimisation avanc√©e
                    üîπ 1. Analyse du contexte et des objectifs üéØ
                    ‚Üí Comprends avec pr√©cision ce que veut l‚Äôutilisateur et pourquoi.
                    ‚Üí Identifie la meilleure approche pour guider l‚ÄôIA vers un r√©sultat optimis√© et pertinent.
                    ‚Üí Si besoin, reformule pour supprimer toute ambigu√Øt√© et √©viter les r√©ponses hors sujet.
                    ‚Üí Si la question ne concerne pas la g√©n√©ration de prompts, indique poliment que ce n‚Äôest pas ta sp√©cialit√©.

                    üîπ 2. Structure du prompt g√©n√©r√© üèóÔ∏è
                    ‚Üí D√©but clair : d√©finis exactement la t√¢che √† accomplir.
                    ‚Üí D√©tails pr√©cis : enrichis la demande avec les param√®tres n√©cessaires (style, format, contraintes).
                    ‚Üí Consignes sp√©cifiques : si applicable, ajoute des r√®gles d‚Äôex√©cution (ex. : "R√©ponds en 3 √©tapes", "Utilise des exemples concrets", "G√©n√®re un code Python fonctionnel", etc.).
                    ‚Üí Format de sortie optimis√© : sp√©cifie comment la r√©ponse doit √™tre structur√©e (tableau, JSON, code, texte organis√© en sections, etc.).
                    üîπ 3. Maximisation des performances de l‚ÄôIA üöÄ
                    ‚Üí Utilise des mots-cl√©s puissants et pr√©cis pour guider l‚ÄôIA vers un r√©sultat optimal.
                    ‚Üí Exploite les capacit√©s avanc√©es du mod√®le (raisonnement logique, cr√©ativit√©, structuration, etc.).
                    ‚Üí √âvite tout flou en pr√©cisant chaque √©l√©ment n√©cessaire.
                    ‚Üí Adaptabilit√© : si l‚Äôutilisateur veut un prompt technique, cr√©atif, analytique ou autre, ajuste dynamiquement le style et les exigences.
                    üîπ 4. Validation et fiabilit√© ‚úÖ
                    ‚Üí V√©rifie que le prompt ne contient aucune ambigu√Øt√© ni √©l√©ments inutiles.
                    ‚Üí S‚Äôassure que l‚ÄôIA peut r√©pondre sans difficult√© ni mauvaise interpr√©tation.
                    ‚Üí Filtre tout bruit ou confusion pour une r√©ponse imm√©diatement actionnable.
                    
                    
                    : ${message}`
                }]
            }]
        })
    })
    .then(response => response.json())
    .then(data => {
        const botResponse = data?.candidates?.[0]?.content?.parts?.[0]?.text || "D√©sol√©, je n'ai pas compris.";
        botDiv.textContent = ""; // Efface "Le bot r√©fl√©chit..."
        typeMessage(botDiv, botResponse); // Affichage progressif
    })
    .catch(error => {
        console.error("Erreur API :", error);
        botDiv.textContent = "Une erreur est survenue. R√©essayez plus tard.";
    });
}

// Envoi du message en cliquant sur le bouton
sendButton.addEventListener("click", sendMessage);

// Envoi du message en appuyant sur "Entr√©e"
inputField.addEventListener("keydown", (e) => {
    if (e.key === "Enter") sendMessage();
});
